#include "DynamicMarkingF.js"#include "DynamicMarkingP.js"#include "DynamicMarkingS.js"function DynamicMarking(Stratum, dynamicList, x, y, type) {        // for testing!    this.systemID = 0;    // -----------------    this.Stratum = Stratum;    this.type = type || "ord"; // types come in as "ord", "implicit"    this.dynamicList = dynamicList;    this.x = x || 400;    this.y = y || 400;    this.graphicalDimensions();    this.charList = [];    if (this.type === "ord") {        this.createCharList();        this.getDimensions();    }    else if (this.type === "implicit") {        this.left = this.x;        this.right = this.x;    };    this.hasBeenDrawn = false;}DynamicMarking.prototype.graphicalDimensions = function() {    // INHERIT THIS, and convert...    this.g = this.Stratum.g;    // --------------    this.slope = 16 / 3;    this.strokeWidth = 0.2 * this.g;    this.color = gray[80];    this.serifLength = 0.75 * this.g;}DynamicMarking.prototype.getDimensions = function() {    this.getWidth();    // this is dirty and terrible, fix!    if (this.charList[0] === "s") {        var firstCharDisplace = this.displaceByChar(this.charList[1]);        var exclamationDisplace = 1.5 * this.g;        var widthDisplace = firstCharDisplace + exclamationDisplace;        this.left = this.x - widthDisplace;        this.width += widthDisplace;        if (this.charList[1] === "f" && this.charList.last() === "p") {            this.width += 0.1625 * this.displaceByChar(this.charList.last());        }        else if (this.charList[1] === "p" && this.charList.last() === "f") {            this.width -= 0.1625 * this.displaceByChar(this.charList.last())        };    }    else {        this.left = this.x - this.displaceByChar(this.charList[0]);        if (this.charList[1] === "f" && this.charList.last() === "p") {            this.width -= 0.1625 * this.displaceByChar(this.charList.last());        };    };    this.right = this.left + this.width;};DynamicMarking.prototype.createCharList = function() {    // check for sforzando    for (var d = 0; d < this.dynamicList.length; d ++) {        var dynamic = this.dynamicList[d];        if (typeof dynamic === "string") {            this.charList.push("s");            var dynamic = parseInt(dynamic);        };        if (Math.abs(dynamic) >= 2) {            var direction = this.dynamicToDirection(dynamic);            var character = this.directionToChar(direction);            var amount = Math.abs(dynamic) - 1;            for (var c = 0; c < amount; c ++) {                this.charList.push(character);            };        }        else if (dynamic === -1) { this.charList.push(/*"m", */"p"); }        else if (dynamic === 1) { this.charList.push(/*"m", */"f"); }        else if (dynamic === 0) { this.charList.push("o"); };    };};DynamicMarking.prototype.draw = function(graphicalContext) {    this.graphicalContext = graphicalContext.groupItems.add();    for (var c = 0, x = this.x; c < this.charList.length; c ++) {        var character = this.charList[c];        var charDisplace = this.displaceByChar(character);        if (c > 0) {            if (c === 1 && this.charList[0] === "s") { charDisplace = 0; }            else {                if (character === "p" && this.charList[c - 1] === "f")                    { charDisplace *= 0.8375; }                else if (character === "f" && this.charList[c - 1] === "p")                    { charDisplace *= 1.25; };             };            x += charDisplace;        };        this[character](x);    };    this.hasBeenDrawn = true;};DynamicMarking.prototype.testLine = function() {    var line = this.graphicalContext.pathItems.add();    line.setEntirePath([[this.x, this.y + 50], [this.x, this.y - 50]]);    line.strokeWidth = 0.1;        /*var line = this.graphicalContext.pathItems.add();    line.setEntirePath([[this.right, this.y + 50],[this.right, this.y - 50]]);    line.strokeWidth = 0.1;    var line = this.graphicalContext.pathItems.add();    line.setEntirePath([[this.left, this.y + 50],[this.left, this.y - 50]]);    line.strokeWidth = 0.1;    */}DynamicMarking.prototype.getWidth = function() {    this.width = 0;    for (var c = 0; c < this.charList.length; c ++) {        var character = this.charList[c];        if (character !== "s") {            var charWidth = this.displaceByChar(character);            this.width += charWidth;        };    };    if (this.charList.contains("s"))          { this.width -= 0.382 * this.displaceByChar(this.charList.last()); }    else { this.width += 0.618 * this.displaceByChar(this.charList.last()); };};DynamicMarking.prototype.displaceByChar = function(character) {    var displaceByChar = {        "f": 1.18 * this.g,        "p": 1.75 * this.g,    };    return displaceByChar[character];};DynamicMarking.prototype.directionToChar = function(direction) {    if (direction < 0) { return "p"; }    else if (direction > 0) { return "f"; }    else { return "o"; };};DynamicMarking.prototype.dynamicToDirection = function(dynamic) {    var direction;    if (dynamic > 1) { direction = 1; }    else if (dynamic < 1) { direction = -1; }    else { direction = 0 };    return direction;};DynamicMarking.prototype.f = function(x) {    var f = new DynamicMarkingF(this, x);};DynamicMarking.prototype.p = function(x) {    var p = new DynamicMarkingP(this, x);};DynamicMarking.prototype.m = function() {    // var m = this.graphicalContext.groupItems.add();};DynamicMarking.prototype.s = function() {    var s = new DynamicMarkingS(this);};DynamicMarking.prototype.o = function() {    // how to deal with o+? Ø vs o vs o+ ?!?!    var o = this.graphicalContext.groupItems.add();};/*var d = new DynamicMarking([4,-2], 400, 400);d.draw(testDoc)*/