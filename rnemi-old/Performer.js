#include "Instrument.js"function Performer(System, performerID) {        this.System = System;    this.measureList = this.System.measureList;    this.measureRange = this.System.measureRange;    this.performerID = performerID;    this.primaryPerformerID = this.System.primaryPerformerID;    this.beamGroups = this.System.beamGroups;    this.scaleByRole(); // Set this.g based on Primary or Supplementary role    this.top = 0;    this.instrumentDisplace = this.System.instrumentDisplace;    this.manageInstrumentsForLayout();    // Do things here like set-up performer-level PitchSpelling objects}Performer.prototype.manageInstrumentsForLayout = function() {    this.instruments = [];    this.instrumentPad = 0.25 * 72;    var instrument = new Instrument(this);    this.instruments.push(instrument);};Performer.prototype.repositionInstruments = function() {    this.graphsTop;    this.graphsBottom;    this.height = 0;    var instrumentDisplace = 0.125 * 72; // static, not scaled!!    var instrumentTop = this.top;    for (var i = 0; i < this.instruments.length; i ++) {        var instrument = this.instruments[i];        instrument.top = instrumentTop;        instrument.left = this.left + instrumentDisplace;        instrument.repositionGraphs();        if (!this.graphsTop || instrument.graphsTop > this.graphsTop)             { this.graphsTop = instrument.graphsTop; };        if (!this.graphsBottom || instrument.graphsBottom < this.graphsBottom)            { this.graphsBottom = instrument.graphsBottom; };        instrumentTop -= instrument.height + this.instrumentPad;        var pad = i > 0 ? this.instrumentPad : 0;        this.height += instrument.height + pad;    };};Performer.prototype.getHeightForLayout = function() {    this.instrumentPad = 0.25 * 72;    this.height = 0;    for (var i = 0; i < this.instruments.length; i ++) {        var instrument = this.instruments[i];        var height = instrument.getHeightForLayout();        var pad = i > 0 ? this.instrumentPad : 0;        this.height += instrument.height + pad;    };    return this.height;};Performer.prototype.scaleByRole = function() {    this.g = this.performerID === this.primaryPerformerID ? 5 : 0.75 * 5;}Performer.prototype.draw = function(graphicalContext) {    this.graphicalContext = graphicalContext;    this.bracket();    this.label();};Performer.prototype.getGraphDimensions = function() {    for (var i = 0; i < this.instruments.length; i ++) {        var instrument = this.instruments[i];        if (! this.graphsTop || instrument.graphsTop > this.graphsTop)             { this.graphsTop = instrument.graphsTop; };        if (! this.graphsBottom || instrument.graphsBottom < this.graphsBottom)            { this.graphsBottom = instrument.graphsBottom; };    };};Performer.prototype.bracket = function() {    var strokeWidth = 0.25 * this.g;    var color = gray[33];    //var bracketYDisplace = 0.618 * this.instrumentDisplace;    var bracketYDisplace = 0.75 * this.g;    var outsideX =  this.left;    var insideX = this.left + 0.618 * this.g;    var insideTopY = this.graphsTop + bracketYDisplace;    var outsideTopY = insideTopY + 0.618 * this.g;    var insideBottomY = this.graphsBottom - bracketYDisplace;    var outsideBottomY = insideBottomY - 0.618 * this.g;    this.bracketMiddle = (outsideTopY - outsideBottomY) / 2 + outsideBottomY;    var points = [        [insideX, outsideTopY], [outsideX, insideTopY],         [outsideX, insideBottomY], [insideX, outsideBottomY]    ];    var bracket = this.graphicalContext.pathItems.add();    bracket.setEntirePath(points);    bracket.strokeWidth = strokeWidth;    bracket.strokeColor = color;    bracket.filled = false;}Performer.prototype.label = function() {    var textFont = app.textFonts.getByName("Baskerville-SemiBold");    var textSize = 1.5 * this.g;    var color = gray[66];    var label = this.graphicalContext.textFrames.add();    label.contents = this.performerID;    label.top = this.bracketMiddle + (textSize / 2) + 5;    label.left = this.left - 4.5;    label.textRange.characterAttributes.textFont = textFont;    label.textRange.characterAttributes.size = textSize;    label.textRange.characterAttributes.fillColor = color;    label.textRange.paragraphAttributes.justification = Justification.RIGHT;}Performer.prototype.testRect = function() {    this.width = this.System.width;    this.graphicalContext = this.System.graphicalContext;    /*var rect = this.graphicalContext.pathItems.rectangle(        this.top, this.left, this.width, this.height    );    rect.strokeWidth = 0.618;    rect.strokeColor = blue_dark;    rect.fillColor = blue_light;    rect.opacity = 50;    rect.locked = false;    this.testLabel();    */};Performer.prototype.testLabel = function() {    var label = this.graphicalContext.textFrames.add();    label.contents = this.performerID;    label.top = this.top - (0.125 * 72);    label.left = this.left + (0.125 * 72);    label.textRange.paragraphAttributes.justification = Justification.LEFT;    label.locked = false;}