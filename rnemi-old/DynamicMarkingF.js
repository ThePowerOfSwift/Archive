function DynamicMarkingF(DynamicMarking, x) {    this.DynamicMarking = DynamicMarking;    this.graphicalContext = this.DynamicMarking.graphicalContext;    this.y = this.DynamicMarking.y;    this.x = x || 400;    this.g = this.DynamicMarking.g || 5;    this.color = this.DynamicMarking.color;    this.strokeWidth = this.DynamicMarking.strokeWidth;    this.crossStroke();    this.stem();}DynamicMarkingF.prototype.crossStroke = function() {    var length = 1.185 * this.g;    var y = this.y + 1.236 * this.g;    var x0 = this.x - 0.5 * length;    var x1 = this.x + 0.5 * length;    var crossStroke = this.graphicalContext.pathItems.add();    crossStroke.setEntirePath([[x0, y], [x1, y]]);    crossStroke.strokeWidth = this.strokeWidth;    crossStroke.strokeColor = this.color;    crossStroke.filled = false;};DynamicMarkingF.prototype.stem = function() {    var points = [        [            [this.x - 1.05 * this.g, this.y - 1.65 * this.g],            [this.x - 1.05 * this.g, this.y - 1.65 * this.g],            [this.x - 1.05 * this.g, this.y - 1.65 * this.g]        ],        [            [this.x - 0.675 * this.g, this.y - 2 * this.g],            [this.x - 0.675 * this.g, this.y - 2 * this.g],            [this.x - 0.675 * this.g, this.y - 2 * this.g]        ],        [            [this.x, this.y + 1.575 * this.g],            [this.x, this.y + 1.575 * this.g],            [this.x + 0.05 * this.g, this.y + 1.9 * this.g]        ],        [            [this.x + 0.618 * this.g, this.y + 1.95 * this.g],            [this.x + 0.3 * this.g, this.y + 2.2 * this.g],            [this.x + 0.618 * this.g, this.y + 1.95 * this.g]        ]    ];    var stem = this.graphicalContext.pathItems.add();    for (var p = 0; p < points.length; p ++) {        var point = stem.pathPoints.add();        point.anchor = points[p][0];        point.leftDirection = points[p][1];        point.rightDirection = points[p][2];    };    stem.strokeWidth = 1.382 * this.strokeWidth;    stem.strokeColor = this.color;    stem.filled = false;    stem.strokeJoin = StrokeJoin.ROUNDENDJOIN;};