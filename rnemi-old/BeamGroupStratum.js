#include "BeamGroup.js"#include "ExtensionStratum.js"function BeamGroupStratum(Voice) {        this.Voice = Voice;    this.primaryPerformerID = this.Voice.primaryPerformerID;    this.System = this.Voice.System;    this.beatIndex = this.Voice.beatIndex;    this.beatWidth = this.Voice.beatWidth;    this.left = this.Voice.left;    this.beamGroups;    this.bracketDisplaceAtDepth = {};    this.isExpanded = false;    this.withTempo = false;    this.withMetrics = true;    this.withNumerics = true;    this.g = this.Voice.g;    // this info needs to be stored somewhere more thoughtfully    this.beamDisplace = 0.5 * this.g;    this.bracketHeight = 0.85 * this.g;    this.displaceFromPerformer = 1.618 * this.g;}BeamGroupStratum.prototype.testBeamGroups = function() {    this.graphicalContext = this.System.beamItemContext;    var left = this.System.left + 1.25 * this.System.padLeft;        this.extensionStratum = new ExtensionStratum(this);    // this.augDotAltitude = this.altitude - this.stemDirection * this.beamHeight;    for (var b = 0; b < this.beamGroups.length; b ++) {        var beamGroup = this.beamGroups[b];        var beatIndex = beamGroup.beatIndex;        beamGroup.left = left + ((beatIndex - this.beatIndex) * this.beatWidth);        beamGroup.stemDirection = this.stemDirection;        beamGroup.altitude = this.altitude;        beamGroup.extensionStratum = this.extensionStratum;        beamGroup.draw(this.graphicalContext);    };}BeamGroupStratum.prototype.manageBeamGroups = function() {    // to be called externally    // Receive all beamGroups from BeamGroupVoice    for (var b = 0; b < this.beamGroups.length; b ++) {        var beamGroup = this.beamGroups[b];        // give positional info to beamGroup! not yet…        var beatIndex = beamGroup.Span.beatIndex;        var left = this.left + (beatIndex - this.beatIndex) * this.beatWidth;    };    this.getGreatestSubdLevel();    this.setBracketDisplaceByDepth();}; BeamGroupStratum.prototype.getGreatestSubdLevel = function() {    this.greatestSubdLevel;    for (var b = 0; b < this.beamGroups.length; b ++) {        var beamGroup = this.beamGroups[b];        var flattened = beamGroup.flattened;        for (var e = 0; e < flattened.length; e ++) {            var event = flattened[e];            var subdLevel = subdToLevel(event.subdivision);            if (!this.greatestSubdLevel ||                 subdLevel > this.greatestSubdLevel            ) {                this.greatestSubdLevel = subdLevel;            };        };    };    return this.greatestSubdLevel;};BeamGroupStratum.prototype.setBracketDisplaceByDepth = function() {    this.maxTupletDepth;    this.bracketDisplaceAtDepth = {};    for (var b = 0; b < this.beamGroups.length; b ++) {        var beamGroup = this.beamGroups[b];        var maxTupletDepth = beamGroup.maxTupletDepth;        if (!this.maxTupletDepth || maxTupletDepth > this.maxTupletDepth) {            this.maxTupletDepth = maxTupletDepth;        };        for (var depth = 0; depth <= beamGroup.maxTupletDepth; depth ++) {            var bracketDisplace = beamGroup.bracketDisplaceAtDepth[depth];            if (!this.bracketDisplaceAtDepth[depth] ||                 bracketDisplace > this.bracketDisplaceAtDepth[depth]            ) {                this.bracketDisplaceAtDepth[depth] = bracketDisplace;            };        };    };    // set all beamGroup bracket displace properties to this master object    for (var b = 0; b < this.beamGroups.length; b ++) {        var beamGroup = this.beamGroups[b];        beamGroup.bracketDisplaceAtDepth = this.bracketDisplaceAtDepth;    };}BeamGroupStratum.prototype.getBracketDisplace = function(depth) {    var bracketDisplace = 0;    for (var depth = 0; depth <= this.maxTupletDepth; depth ++) {        bracketDisplace += this.bracketDisplaceAtDepth[depth];    };    return bracketDisplace;};BeamGroupStratum.prototype.getHeightForLayout = function() {    this.bracketDisplace = this.getBracketDisplace(0);    this.beamHeight = this.beamDisplace * (this.getGreatestSubdLevel() - 1);    this.height = this.bracketHeight + this.bracketDisplace + this.beamHeight;    return this.height;};