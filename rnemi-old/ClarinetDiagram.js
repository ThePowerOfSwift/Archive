#include "FingeringDiagram.js"function ClarinetDiagram(x, baseline, f, fingering, type) {        curDiagram = this;    // Inherit all necessary specific info from parent FingeringDiagram    this.x = x;    this.baseline = baseline;    this.fingering = fingering;    this.type = type;    this.f = f;    this.strokeWidth = .033*this.f;        // Call kind ("Bflat", "bass", "Eflat", "A") to specify keyGroups    this[type]();        // Inherit attributes and methods from parent FingeringDiagram    FingeringDiagram.call(this);        // Calls for the drawing of all keys (method inherited from parent)    this.keys();}// Inherit attributes and methods from parent FingeringDiagramClarinetDiagram.prototype = new FingeringDiagram();// Methods to call different kinds ("Bflat", "bass", "Eflat", "A")ClarinetDiagram.prototype.Bflat = function() {        // Adjust this.keyGroups    this.keyGroupLists = {                "lh_thumb": ["lh_thumb", "lhR"],        "lh_front": ["lhGsharp_front", "lhA_front"],        "lhSliver": ["lhSliver"],        "lhCsharp_side": ["lhCsharp_side"],        "lh_pinky": ["lhF_side", "lhE_side", "lhFsharp_side"],        "rh_side": ["rhB_side", "rhBflat_side", "rhFsharp_side", "rhEflat_side"],        "rhSliver": ["rhSliver"],        "rh_pinky": ["rhFsharp_low", "rhGsharp_low", "rhE_low", "rhF_low"]    };};ClarinetDiagram.prototype.bass = function() {        // Adjust this.keyGroups    this.keyGroupLists = {                "lh_thumb": ["lh_thumb", "lhR"],        "lh_front": ["lhGsharp_front", "lhA_front"],        "lhSliver": ["lhSliver"],        "lh_pinky": [            "lhCsharp_side", "lhF_side", "lhE_side",             "lhFsharp_side", "lhGsharp_side"        ],        "rh_thumb": ["rhthumbD", "rhthumbDflat", "rhthumbC"],        "rh_side": ["rhB_side", "rhBflat_side", "rhFsharp_side", "rhEflat_side"],        "rhSliver": ["rhSliver"],        "rh_pinky": [            "rhFsharp_low", "rhGsharp_low", "rhE_low", "rhF_low",             "rhEflat_low", "rhD_low"        ]     };};ClarinetDiagram.prototype.Eflat = function() {        // Adjust this.keyGroups};ClarinetDiagram.prototype.A = function() {        // Adjust this.keyGroups};// Key methodsClarinetDiagram.prototype.lh_thumb = function(state) {        var x = this.x - 1.236*this.f;    var y = this.baseline + 9.8*this.f;    var d = this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new CircleKey(x, y, d)[state]();}ClarinetDiagram.prototype.lhR = function(state) {        var x = this.x - 2.15*this.f;    var y = this.baseline + 11.5*this.f;    var width = 2*this.f;    var height = .4*this.f;    var angle = -90;        // Call for the drawing of key, with the appropriate state method called    var key = new TearDropKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.lhGsharp_front = function(state) {        var x = this.x + 1*this.f;    var y = this.baseline + 10.8*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new clGsharpKey(x, y)[state]();}ClarinetDiagram.prototype.lhA_front = function(state) {        var x = this.x;    var y = this.baseline + 11.8*this.f;    var width = .4*this.f;    var height = .85*this.f;    var angle = 0;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.lhSliver = function(state) {        var x = this.x + 0.28*this.f;    var y = this.baseline + 8.45*this.f;    var width = 1.2*this.f;    var height = .2*this.f;    var angle = -160;        // Call for the drawing of key, with the appropriate state method called    var key = new TearDropKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.lhCsharp_side = function(state) {        var x = this.x + 0.45*this.f;    var y = this.baseline + 6.875*this.f;    var width = 1.2*this.f;    var height = .35*this.f;    var angle = 0;        // Call for the drawing of key, with the appropriate state method called    var key = new TearDropKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.lhF_side = function(state) {    var x = this.x + 1.95*this.f;    var y = this.baseline + 7.4*this.f;    var width = .9*this.f;    var height = .4*this.f;    var angle = 18;     // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state](); }ClarinetDiagram.prototype.lhE_side = function(state) {        var x = this.x + 1.4*this.f;    var y = this.baseline + 5.6*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new clLeftEKey(x, y)[state]();}ClarinetDiagram.prototype.lhFsharp_side = function(state) {        var x = this.x + 1.5*this.f;    var y = this.baseline + 5.6*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new clLeftFsharpKey(x, y)[state]();}ClarinetDiagram.prototype.lhGsharp_side = function(state) {        var x = this.x + 1.45*this.f;    var y = this.baseline + 5.6*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new clLeftGsharpKey(x, y)[state]();}ClarinetDiagram.prototype.rhThumbD = function(state) {    var x = this.x - 2.65*this.f;    var y = this.baseline + 5.6*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new clThumbDKey(x, y)[state]();   }ClarinetDiagram.prototype.rhThumbDflat = function(state) {        var x = this.x - 1.95*this.f;    var y = this.baseline + 3.8*this.f;    var width = .7*this.f;    var height = .6*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}ClarinetDiagram.prototype.rhThumbC = function(state) {        var x = this.x - 1.95*this.f;    var y = this.baseline + 3.1*this.f;    var width = .7*this.f;    var height = .6*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}ClarinetDiagram.prototype.rhB_side = function(state) {        var x = this.x - 1.236*this.f;    var y = this.baseline + 7.35*this.f;    var width = .7*this.f;    var height = .4*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}ClarinetDiagram.prototype.rhBflat_side = function(state) {        var x = this.x - 1.236*this.f;    var y = this.baseline + 6.85*this.f;    var width = .7*this.f;    var height = .4*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}ClarinetDiagram.prototype.rhFsharp_side = function(state) {        var x = this.x - 1.236*this.f;    var y = this.baseline + 6.35*this.f;    var width = .7*this.f;    var height = .4*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}ClarinetDiagram.prototype.rhEflat_side = function(state) {        var x = this.x - 1.236*this.f;    var y = this.baseline + 5.85*this.f    var width = .7*this.f;    var height = .4*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}ClarinetDiagram.prototype.rhSliver = function(state) {        var x = this.x - 1.5*this.f;    var y = this.baseline + 3.5*this.f;    var width = 1.2*this.f;    var height = .2*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new TearDropKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.rhFsharp_low = function(state) {        var x = this.x - 1.35*this.f;    var y = this.baseline + 1.7*this.f;    var width = 1.4*this.f;    var height = .55*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.rhGsharp_low = function(state) {        var x = this.x - .45*this.f;    var y = this.baseline + 1.65*this.f    var width = 1.4*this.f;    var height = .55*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.rhE_low = function(state) {        var x = this.x - 1.35*this.f;    var y = this.baseline + 1.05*this.f;    var width = 1.4*this.f;    var height = .55*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.rhF_low = function(state) {        var x = this.x - .45*this.f;    var y = this.baseline + 1*this.f;    var width = 1.4*this.f;    var height = .55*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.rhEflat_low = function(state) {        var x = this.x - 1.35*this.f;    var y = this.baseline + .4*this.f;    var width = 1.4*this.f;    var height = .55*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}ClarinetDiagram.prototype.rhD_low = function(state) {        var x = this.x - .45*this.f;    var y = this.baseline + .35*this.f;    var width = 1.4*this.f;    var height = .55*this.f;    var angle = -18;        // Call for the drawing of key, with the appropriate state method called    var key = new OvalKey(x, y, width, height, angle)[state]();}