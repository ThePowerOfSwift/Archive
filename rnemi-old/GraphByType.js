#include "Staff.js"#include "CueGraph.js"//#include "StringTablature.js"function GraphByType(Instrument, type, graphID) {        // this whole thing does not seem like a good way of doing things…    this.Instrument = Instrument;    this.graphID = graphID;    this.performerID = this.Instrument.performerID;    this.type = type || "staff";    this.measureList = this.Instrument.measureList;    this.measureRange = this.Instrument.measureRange;    this.performerID = this.Instrument.performerID;    this.g = this.Instrument.g;    // for testing only!    this.height = 4 * this.g;    this.setDimensions();    // Call method of type as appropriate: for now, only Staff funtional?    this[this.type]();}GraphByType.prototype.staff = function(graphID) {        this.graph = new Staff(this.Instrument, this.graphID);};GraphByType.prototype.stringTablature = function() {    //var stringTablature = new StringTablature(this.Instrument);    //return stringTablature;};GraphByType.prototype.cue = function(graphID) {    this.graph = new CueGraph(this.Instrument, this.graphID);}GraphByType.prototype.setDimensions = function() {    this.graphTop = 0; // Default at 0 for height calculation    this.graphHeight = 4 * this.g; // Make flexible    this.graphBottom = this.graphTop - this.graphHeight;    this.setPitchAltitudes();};GraphByType.prototype.getHeightForLayout = function() {    this.yMaxAltitude = 3 * this.g;    this.height = this.yMax - this.yMin;    return this.height;};GraphByType.prototype.setPitchAltitudes = function() {    // scan through this.measureList in this.measureRange    // for testing, set yMax and yMin to graph.top, graph.bottom;    // retun height    /*var randHeightTop = Math.random()*40;    var randHeightBottom = Math.random()*40;    this.graphMiddle = (this.graphTop + this.graphBottom) / 2;    var maxNoteheadY = this.graphMiddle + randHeightTop;    var minNoteheadY = this.graphMiddle - randHeightBottom;*/    this.yMax = this.graphTop;    this.yMin = this.graphBottom;}GraphByType.prototype.draw = function(graphicalContext) {    this.graphicalContext = graphicalContext.groupItems.add();    var staff = new Staff(this.top, this.left, this.g);    staff.draw(this.graphicalContext);    //this.testRect();}GraphByType.prototype.testRect = function() {    this.width = this.Instrument.Performer.System.width;    this.height = this.graphTop - this.graphBottom;    this.graphicalContext = this.Instrument.Performer.System.graphicalContext;    /*var rect = this.graphicalContext.pathItems.rectangle(        this.top, this.left, this.width, this.height    );    rect.strokeWidth = 0.618;    rect.strokeColor = orange_dark;    rect.filled = false;    */    }