#include "FingeringDiagram.js"function FluteDiagram(x, baseline, f, fingering, type) {        curDiagram = this;    // Inherit all necessary specific info from parent FingeringDiagram    this.x = x;    this.baseline = baseline;    this.fingering = fingering;    this.type = type;    this.f = f; // temporary, for testing    this.strokeWidth = .033*this.f;    // Call kind ("Bflat", "bass", "Eflat", "A") to adjust keyGroups    this[type]();    // Inherit attributes and methods from parent FingeringDiagram    FingeringDiagram.call(this);        // Calls for the drawing of all keys (method inherited from parent)    this.keys();}// Inherit attributes and methods from parent FingeringDiagramFluteDiagram.prototype = new FingeringDiagram();FluteDiagram.prototype.keyGroups = function() {    // Draw all keys in key groups    for (var g in this.keyGroupLists) {        var curGroup = this.keyGroupLists[g];        var activeKeys = 0;        for (var k = 0; k < curGroup.length; k ++) {            var curKey = curGroup[k];            var curKeyVal = this.fingering[curKey];            if (curKeyVal != 0) {                activeKeys ++            };        };        // Filter out exception with only Dsharp and now low pinky activity        if (            g === "rh_low" &&             this.fingering["rhDsharp"] === 1 &&            this.fingering["rhCsharp"] === 0 &&            this.fingering["rhC"] === 0 &&            this.fingering["rhB_low"] === 0        ) {            var key = this["rhDsharp"]("active");        }        // IF no exception, go on with business as usual        else if (activeKeys > 0) {            for (var k = 0; k < curGroup.length; k ++) {                var curKey = curGroup[k];                var curKeyVal = this.fingering[curKey];                var curState = keyValToState(curKeyVal);                var key = this[curKey](curState);            };        };    };};// Method for each kind of flute ("piccolo", "concert", "alto", "bass")FluteDiagram.prototype.piccolo = function() {        this.keyGroupLists = {                "lhThumb": ["lhB", "lhBflat"],        "lhGsharp": ["lhGsharp"],        "rhAB": ["rhA", "rhB"],        "rhDsharp": ["rhDsharp"]    };}FluteDiagram.prototype.concert = function() {        this.keyGroupLists = {                "lhThumb": ["lhB", "lhBflat"],        "lhGsharp": ["lhGsharp"],        "rhAB": ["rhA", "rhB"],        "rh_low": ["rhDsharp", "rhCsharp", "rhC", "rhB_low"]    };}FluteDiagram.prototype.alto = function() {        this.keyGroupLists = {                "lhThumb": ["lhB", "lhBflat"],        "lhGsharp": ["lhGsharp"],        "rhAB": ["rhA", "rhB"],        "rh_low": ["rhDsharp", "rhCsharp", "rhC", "rhB_low"]    };}FluteDiagram.prototype.bass = function() {        this.keyGroupLists = {                "lhThumb": ["lhB", "lhBflat"],        "lhGsharp": ["lhGsharp"],        "rhAB": ["rhA", "rhB"],        "rh_low": ["rhDsharp", "rhCsharp", "rhC", "rhB_low"]    };}// Key methodsFluteDiagram.prototype.lhB = function(state) {    var x = this.x - .9*this.f;    var y = this.baseline + 8.3*this.f;        // Call for the drawing of this key    var key = new flBKey(x, y)[state]();}FluteDiagram.prototype.lhBflat = function(state) {        var x = this.x - .75*this.f;    var y = this.baseline + 9.8*this.f;    // Call for the drawing of key, with the appropriate state method called    var key = new flBflatKey(x, y)[state]();}FluteDiagram.prototype.lhGsharp = function(state) {        var x = this.x + .65*this.f;    var y = this.baseline + 6.75*this.f;    // Call for the drawing of key, with the appropriate state method called    var key = new flGsharpKey(x, y)[state]();};FluteDiagram.prototype.rhA = function(state) {        var x = this.x - 1*this.f;    var y = this.baseline + 4.85*this.f;    var width = .66*this.f;    var height = .4*this.f;    // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}FluteDiagram.prototype.rhB = function(state) {        var x = this.x - 1*this.f;    var y = this.baseline + 3.35*this.f;    var width = .66*this.f;    var height = .4*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}FluteDiagram.prototype.rhDsharp = function(state) {        var x = this.x - .5*this.f;    var y = this.baseline + 1.175*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new flDsharpKey(x, y)[state]();}FluteDiagram.prototype.rhCsharp = function(state) {        var x = this.x + .1*this.f;    var y = this.baseline;        // Call for the drawing of key, with the appropriate state method called    var key = new flCsharpKey(x, y)[state]();}FluteDiagram.prototype.rhC = function(state) {        var x = this.x + .375*this.f;    var y = this.baseline + .5*this.f;    var width = .35*this.f;    var height = 1*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}FluteDiagram.prototype.rhB_low = function(state) {        var x = this.x + .825*this.f;    var y = this.baseline + .5*this.f;    var width = .35*this.f;    var height = 1*this.f;        // Call for the drawing of key, with the appropriate state method called    var key = new PillKey(x, y, width, height)[state]();}