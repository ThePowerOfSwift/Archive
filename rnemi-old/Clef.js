#include "colors.js"function Clef(Graph, x, type, transposition) {        this.Graph = Graph;    this.graphicalContext = this.Graph.graphItemContext.groupItems.add();;    this.g = this.Graph.g;    this.x = x;    this.endDisplaceFromGraph = 0.618 * this.g;    this.top = this.Graph.top + this.endDisplaceFromGraph;    this.bottom = this.Graph.bottom - this.endDisplaceFromGraph;    this.middle = (this.top + this.bottom) / 2;    this.type = type || "treble";    this.transposition = transposition || 0;    this.transpositionDirection = this.transpositionToDirection();    this.strokeWidth = 0.1 * this.g;    this.color = magenta;    // Add all objects to this group: added to GRAPH_ITEMS universe    this.group = this.graphicalContext.groupItems.add();    // Call appropriate method    this[type]();    // Add transposition information as necessary    if (this.transposition !== 0) this.transpose();}Clef.prototype.verticalLine = function() {    var line = this.graphicalContext.pathItems.add();    line.setEntirePath([        [this.x, this.top],        [this.x, this.bottom]    ]);    line.strokeWidth = this.strokeWidth;    line.strokeColor = this.color;    line.filled = false;}Clef.prototype.cue = function() {    t.w("cue clef?");    var line = this.graphicalContext.pathItems.add();    line.setEntirePath([        [this.x, this.top + 0.382 * this.g],        [this.x, this.bottom - 0.382 * this.g]    ]);    line.strokeWidth = this.strokeWidth;    line.strokeColor = this.color;    line.filled = false;}Clef.prototype.treble = function() {    // Draw ellipse    var height = 0.8 * this.g;     var width = 1.618 * height;    var ellipse = this.graphicalContext.pathItems.ellipse(        this.middle - (1 * this.g) + (0.5 * height),        this.x - 0.5 * width,        width,        height    );    ellipse.strokeWidth = this.strokeWidth;    ellipse.strokeColor = this.color;    ellipse.fillColor = white;    ellipse.rotate(45);    // Draw communal line    this.verticalLine();}Clef.prototype.alto = function() {    // Draw diamond    var yRef = this.middle;    var width = 0.66 * this.g;    var diamond = this.graphicalContext.pathItems.rectangle(        yRef + (0.5 * width),        this.x - (0.5 * width),        width,        width    );    diamond.strokeWidth = this.strokeWidth;    diamond.strokeColor = this.color;    diamond.fillColor = white;    diamond.rotate(45);    // Draw communal line    this.verticalLine();}Clef.prototype.tenor = function() {    // Draw communal line    this.verticalLine();    // Draw diamond    var yRef = this.middle + 1 * this.g;    var width = 0.66 * this.g;    var diamond = this.graphicalContext.pathItems.rectangle(        yRef + (0.5 * width),        this.x - (0.5 * width),        width,        width    );    diamond.strokeWidth = this.strokeWidth;    diamond.strokeColor = this.color;    diamond.fillColor = white;    diamond.rotate(45); }Clef.prototype.bass = function() {    // Draw communal line    this.verticalLine();    // Draw dots    var yRef = this.middle + 1 * this.g;    var yDisplace = 0.4 * this.g;    var xDisplace = 0.618 * this.g;    var diameter = 0.275 * this.g;    for (var d = -1; d < 2; d += 2) {        var dot = this.graphicalContext.pathItems.ellipse(            yRef + (d * yDisplace) + (0.5 * diameter),            this.x + xDisplace - (0.5 * diameter),            diameter,            diameter        );        dot.stroked = false;        dot.fillColor = this.color;    };}Clef.prototype.transpose = function() {    this.transpositionLine();    this.transpositionLabel();}Clef.prototype.transpositionLine = function() {    var x = this.x;    if (this.transpositionDirection === 1) { y = this.top; }    else { y = this.bottom };    var amountChar = this.transpositionOctaveToText().toString().length;    var charScale = 0.25 * this.g;    var length = (amountChar * charScale) + (0.75 * this.g);    var line = this.graphicalContext.pathItems.add();    line.setEntirePath([        [x - (0.5 * length), y],        [x + (0.5 * length), y]    ]);    line.strokeWidth = this.strokeWidth;    line.strokeColor = this.color;    line.filled = false;}Clef.prototype.transpositionLabel = function() {    var size = 1.618 * this.g;    var yDisplace = 0.125 * this.g;    if (this.transpositionDirection === 1)         { y = this.top + (1.35 * size) + yDisplace; }    else if (this.transpositionDirection === -1)         { y = this.bottom + (0.425 * size) - yDisplace; };    t.w("transposition: " + this.transposition + "; transpositionLabel.y: " + y);    var font = app.textFonts.getByName("AvenirNextCondensed-DemiBold");    var contents = this.transpositionOctaveToText();    var label = this.graphicalContext.textFrames.add();    label.contents = contents;    label.top = y;    label.left = this.x;    label.textRange.characterAttributes.textFont = font;    label.textRange.characterAttributes.size = size;    label.textRange.characterAttributes.fillColor = gray[50];    label.textRange.paragraphAttributes.justification = Justification.CENTER;    if (Math.abs(this.transposition) === 2) {        // move slightly to the left to achieve a "perceived centering"        label.textRange.characterAttributes.tracking = -50;        label.left -= 0.0618 * this.g;    };}Clef.prototype.transpositionOctaveToText = function() {    var transpositionOctaveToText = {        "-3": 22, "-2": 15, "-1": 8, "1": 8, "2": 15, "3": 22    };    return transpositionOctaveToText[this.transposition];}Clef.prototype.transpositionExclamation = function() {}Clef.prototype.transpositionNullSymbol = function() {}Clef.prototype.transpositionToDirection = function() {    if (this.transposition > 0) { transpositionDirection = 1 };    else if (this.transposition < 0) { transpositionDirection = -1 };    else { transpositionDirection = 0 };    return transpositionDirection;}