#include "conversions.js"#include "FingDot.js"// CHANGE STRING INPUT TO SOMETHING MORE EXPANSIVE AT SOME POINT?function StringFing(    curX, bottom, height,     scordOpenStrings, ordOpenStrings,     position, type, info, string) {        this.type = type;        if (type == "artHarm") {                this.artHarm(curX, bottom, height, scordOpenStrings, ordOpenStrings,            position, string, info.partialInstance, info.partial)    }    else if (type == "compoundArtHarm") {                this.compoundArtHarm(curX, bottom, height, scordOpenStrings,             ordOpenStrings,position, string, info.partialInstance, info.partial)    }    else if (type == "natHarm") {                this.natHarm(curX, bottom, height, scordOpenStrings, ordOpenStrings,            string, info.partialInstance, info.partial)    }    else if (type == "ord") {                this.ord(curX, bottom, height, scordOpenStrings, ordOpenStrings,            position, string);    };        // Add linePoints to tablature    curInstr.graphs.tablature.linePoints(curX);}StringFing.prototype.ord = function(    curX, bottom, height, scordOpenStrings, ordOpenStrings, position, string) {        var ordDot = new FingDot(curX, bottom, height, position, "ord", string);        this.pitch_fingered = [{                "pitch": positionToMidi(position, ordOpenStrings[string]),        "kind": "ord"    }];        this.pitch_sounding = [{                "pitch": positionToMidi(position, ordOpenStrings[string]) +                 (scordOpenStrings[string] - ordOpenStrings[string]),        "kind": "ord"    }];        if (this.type == "ord") {                curGraph = "sounding";        curInstr.graphs.sounding.pitch(curX, this.pitch_sounding);                curGraph = "fingered";        curInstr.graphs.fingered.pitch(curX, this.pitch_fingered);                curInstr.graphs.tablature.fingLinePoint(curX, position*height + bottom)    };          // Draw string text    this.stringText(curX, bottom, height, position, string);                                };StringFing.prototype.natHarm = function(    curX, bottom, height, scordOpenStrings, ordOpenStrings,     string, partialInstance, partial) {    var harmDot_position = partialInstance/partial    var harmDot = new FingDot(        curX, bottom, height, harmDot_position, "harm", string    );        this.pitch_fingered = [        {            "pitch": positionToMidi(harmDot_position, ordOpenStrings[string]),            "kind": "harmonic"        },        {            "pitch": ordOpenStrings[string],            "kind": "supplementary"        }    ];        this.pitch_sounding = [        {            "pitch": freqToMidi(partial*midiToFreq(scordOpenStrings[string])),            "kind": "ord"        }    ];        curGraph = "sounding";    curInstr.graphs.sounding.pitch(curX, this.pitch_sounding);        curGraph = "fingered";    curInstr.graphs.fingered.pitch(curX, this.pitch_fingered);        curInstr.graphs.tablature.fingLinePoint(curX, position*height + bottom)};StringFing.prototype.artHarm = function(    curX, bottom, height, scordOpenStrings, ordOpenStrings,    position, string, partialInstance, partial) {        // Calculate position of harmonic dot    var harmDot_position = position + partialInstance/partial*(1-position)        //Draw Connecting Line    this.connectingLine(curX, bottom, height, position, harmDot_position, string);        //Draw Partial # Text    this.artHarm_text(curX, bottom, height, harmDot_position, partial, string);         //Draw String # Text    this.stringText(curX, bottom, height, position, string);        // Draw Ord Dot    this.ord(curX, bottom, height,         scordOpenStrings, ordOpenStrings, position, string);        // Draw Harmonic Dot    var harmDot = new FingDot(        curX, bottom, height, harmDot_position, "harm", string    );        this.pitch_fingered = [        {            "pitch": positionToMidi(position, ordOpenStrings[string]),            "kind": "ord"        },         {            "pitch": positionToMidi(harmDot_position, ordOpenStrings[string]),            "kind": "harmonic"        }    ];        this.pitch_sounding = [        {            "pitch": freqToMidi(positionToFreq(position, scordOpenStrings[string])*partial),            "kind": "ord"        }    ];        curGraph = "sounding";    curInstr.graphs.sounding.pitch(curX, this.pitch_sounding);        curGraph = "fingered";    curInstr.graphs.fingered.pitch(curX, this.pitch_fingered);        curInstr.graphs.tablature.fingLinePoint(curX, position*height + bottom)};StringFing.prototype.compoundArtHarm = function(curX, position, string, partialInstance, partial) {        // Calculate position of harmonic dot    var harmDot_position0 = position + partialInstance/partial*(1-position)        // Calculate position of harmonic dot    var harmDot_position1 = position + partialInstance/partial/2*(1-position)        // Draw Connecting Line    this.connectingLine(curX, position, harmDot_position0, string);        // Draw Harmonic0 Dot    var harmDot0 = new FingDot(curX, harmDot_position0, "harm", string);        // Draw Partial0 # Text    this.artHarm_text(curX, harmDot_position0, partial, string);            // Draw Harmonic1 Dot    var harmDot1 = new FingDot(curX, harmDot_position1, "harm", string);        // Draw Partial1 # Text    this.artHarm_text(curX, harmDot_position1, partial*2, string);      // Draw String # Text    this.stringText(curX, position, string);        // Draw Ord Dot    this.ord(curX, position, string);};StringFing.prototype.mph = function(curX, position, partialPair) {        // multiphonic fingering};StringFing.prototype.connectingLine = function(    curX, bottom, height, position1, position2, string) {        var connectingLine = INFO_ITEMS.pathItems.add();    connectingLine.name = "Connecting Line";    connectingLine.stroked = true;    connectingLine.strokeWidth = 1.618;    connectingLine.strokeColor = stringColor[string][1];    connectingLine.filled = false;        connectingLine.setEntirePath([        [curX, bottom + position1*height],        [curX, bottom + position2*height]    ]);};StringFing.prototype.artHarm_text = function(curX, bottom, height, harmDot_position, partial, string) {        var harm_text = INFO_ITEMS.textFrames.add();    harm_text.contents = partial;    harm_text.top = bottom + harmDot_position*height + 5.75;    harm_text.left = curX - 5.5;    harm_text.textRange.paragraphAttributes.justification = Justification.RIGHT;    harm_text.textRange.characterAttributes.size = 12;    harm_text.textRange.characterAttributes.fillColor = stringColor[string][0]    harm_text.textRange.characterAttributes.textFont =         app.textFonts.getByName("AvenirNextCondensed-DemiBold")};StringFing.prototype.natHarm_text = function(curX, bottom, height,    harmDot_position, partialInstance, partial, string) {            // DRAW NAT HARM TEXT   };StringFing.prototype.stringText = function(curX, bottom, height, position, string) {        var stringNum = ["I", "II", "III", "IV"];    var string_text = INFO_ITEMS.textFrames.add();    string_text.contents = stringNum[string];    string_text.top = bottom + position*height - 3.75;    string_text.left = curX;    string_text.textRange.paragraphAttributes.justification = Justification.CENTER;    string_text.textRange.characterAttributes.size = 10;    string_text.textRange.characterAttributes.fillColor = stringColor[string][0]    string_text.textRange.characterAttributes.textFont =         app.textFonts.getByName("TimesNewRomanPS-BoldMT")};