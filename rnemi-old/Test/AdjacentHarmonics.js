#include "../testDoc.js"#include "../conversions.js"#include "../colors.js"#include "../Staff.js"function AdjacentHarmonics(scordOpenStrings, ordOpenStrings) {	this.scordOpenStrings = scordOpenStrings;	this.ordOpenStrings = ordOpenStrings;	this.buildPitchList();	this.drawPitches();}AdjacentHarmonics.prototype.buildPitchList = function() {	this.pitchListByString = {};	for (var string = 0; string < 4; string ++) {		this.pitchListByString[string] = {};		var stringFundamentalMidi = this.scordOpenStrings[string];		var stringFundamentalFreq = midiToFreq(stringFundamentalMidi);		for (var partial = 2; partial < 10; partial ++) {			var freq = stringFundamentalFreq * partial;			var midi = freqToMidi(freq);			this.pitchListByString[string][partial] = Math.round(midi*4)/4;		};	};};AdjacentHarmonics.prototype.drawPitches = function() {	var widthThresholdsByPartial = {		"2": [2],		"3": [3,4],		"4": [3,4,5,6],		"5": [3,4,5,6,7,8],		"6": [4,5,6,7,8,9],		"7": [5,6,7,8,9],		"8": [5,6,7,8,9],		"9": [6,7,8,9]	};        var top = 10 * 72;	for (var string = 0; string < 3; string ++) {        var soundingHarmonics = new Staff(100, top - 250*string, 0.75 * 5, "treble", 0);        var staffLabel = this.staffLabel(top - 250*string + 5, "Sounding Harmonics");                var soundingFull = new Staff(100, top - 40 - 250*string, 0.75 * 5, "alto", 0);        var staffLabel = this.staffLabel(top - 40 - 250*string + 5, "Sounding Full");                var fingered = new Staff(100, top - 80 - 250*string, 5, "alto", 0);        var staffLabel = this.staffLabel(top - 80 - 250*string + 5, "Fingered Position");                var x = 125;			for (var partial = 2; partial <= 9; partial ++) {				for (var a = 0; a < widthThresholdsByPartial[partial].length; a ++) {				var curAdjacentPartial = widthThresholdsByPartial[partial][a];								var curPitch = this.pitchListByString[string][partial];				                 var curAdjacentPitch = 					this.pitchListByString[string + 1][curAdjacentPartial];				                 var curFingeredPitch = Math.round(positionToMidi(					(1 / partial), this.ordOpenStrings[string])*4)/4;                                  var curFingeredFullPitch = Math.round(positionToMidi(                    (1/partial), this.scordOpenStrings[string])*4)/4;				var curAdjacentFingeredPitch = Math.round(positionToMidi(					(1/ curAdjacentPartial), this.ordOpenStrings[string + 1])*4)/4;                                     var curAdjacentFingeredFullPitch = Math.round(positionToMidi(                    (1/curAdjacentPartial), this.scordOpenStrings[string + 1])*4)/4;                                  /*t.w("=================================");                 t.w("harmonic 0: " + curPitch +                      "; harmonic 1: " + curAdjacentPitch                 );                 t.w("full 0: " + curFingeredFullPitch +                      "; full 1: " + curAdjacentFingeredFullPitch                 );*/				var fingeredPitchINFO = {};                var soundingFullPitchINFO = {};				var soundingHarmonicsPitchINFO = {};				fingeredPitchINFO[curFingeredPitch] = {};				fingeredPitchINFO[curFingeredPitch].type = "harmonic";				fingeredPitchINFO[curFingeredPitch].color = 					stringColor[string].darkColor;                                     soundingFullPitchINFO[curFingeredFullPitch] = {};                 soundingFullPitchINFO[curFingeredFullPitch].type = "ord";                 soundingFullPitchINFO[curFingeredFullPitch].color =                     stringColor[string].darkColor;				soundingHarmonicsPitchINFO[curPitch] = {};				soundingHarmonicsPitchINFO[curPitch].type = "ord";				soundingHarmonicsPitchINFO[curPitch].color = stringColor[string].darkColor;                				fingeredPitchINFO[curAdjacentFingeredPitch] = {};				fingeredPitchINFO[curAdjacentFingeredPitch].type = "harmonic";				fingeredPitchINFO[curAdjacentFingeredPitch].color = 					stringColor[string + 1].darkColor;                                     soundingFullPitchINFO[curAdjacentFingeredFullPitch] = {};                 soundingFullPitchINFO[curAdjacentFingeredFullPitch].type = "ord";                 soundingFullPitchINFO[curAdjacentFingeredFullPitch].color =                     stringColor[string + 1].darkColor;				soundingHarmonicsPitchINFO[curAdjacentPitch] = {};				soundingHarmonicsPitchINFO[curAdjacentPitch].type = "ord";				soundingHarmonicsPitchINFO[curAdjacentPitch].color = stringColor[string+1].darkColor;								// Call current staff to draw pitches on itself				soundingHarmonics.pitch(x, soundingHarmonicsPitchINFO);                soundingFull.pitch(x, soundingFullPitchINFO);				fingered.pitch(x, fingeredPitchINFO);								if (fingered.minNoteheadY < fingered.bottom) {					var bottomAltitude = fingered.minNoteheadY - 15;				}				else {					var bottomAltitude = fingered.bottom - 10;				};				if (fingered.maxNoteheadY > fingered.top) {					var topAltitude = fingered.maxNoteheadY + 10;				}				else {					var topAltitude = fingered.top + 5;				};				this.label(x, bottomAltitude - 5, string + 1, curAdjacentPartial);				this.label(x, bottomAltitude - 13.5, string, partial);				x += 33;			};		};	};};AdjacentHarmonics.prototype.staffLabel = function(y, name) {    var text = testDoc.textFrames.add();    var font = app.textFonts.getByName("Baskerville");    text.contents = name;    text.top = y - 7;    text.left = 93;    text.textRange.paragraphAttributes.justification = Justification.RIGHT;	text.textRange.characterAttributes.size = 7;	text.textRange.characterAttributes.fillColor = gray[50];	text.textRange.characterAttributes.textFont = font;};AdjacentHarmonics.prototype.label = function(x, y, string, partial) {	var stringNumberToRoman = ["IV", "III", "II", "I"];	this.labelBox(x, y, string);	var font = app.textFonts.getByName("Baskerville-SemiBold");	var text = testDoc.textFrames.add();	text.contents = stringNumberToRoman[string] + "." + partial;	text.top = y + 10;	text.left = x;	text.textRange.paragraphAttributes.justification = Justification.CENTER;	text.textRange.characterAttributes.size = 8;	text.textRange.characterAttributes.fillColor = stringColor[string].darkColor;	text.textRange.characterAttributes.textFont = font;}AdjacentHarmonics.prototype.labelBox = function(x, y, string) {	var height = 7.5;	var width = 16.5;	var color = stringColor[string].darkColor;		var labelBox = testDoc.pathItems.rectangle(		y + 0.85 * height,		x - 0.5 * width,		width,		height	);	labelBox.strokeWidth = 0.1;	labelBox.strokeColor = color;	labelBox.fillColor = white;}var scordOpenStrings = [46, 55, 61, 69];var ordOpenStrings = [48, 55, 62, 69];var adjacentHarmonics = new AdjacentHarmonics(scordOpenStrings, ordOpenStrings);// Test clarinet pitches://var clarinetStaff = new Staff (50, 100, 5, "treble", -2)