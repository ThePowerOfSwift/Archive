#include "../testDoc.js"#include "../Staff.js"#include "../NormalSequence.js"#include "RhythmTest.js"curScore = {};curScore.beat_width = 72;function MultiDepthRhythm(allowableDepth) {    this.beats = Math.floor(Math.random()*4 + 5);    this.subdivision = 16;    this.durList = this.newDurList(8, 7);    //this.recurseTree(this.durList);    this.rhythm = new RhythmTest(x, 1, this.beats, this.subdivision, this.durList);}MultiDepthRhythm.prototype.newDurList = function(max, maxAmount) {    /*var primeList = [5, 7, 11];    var randPrimeSumVal = Math.floor(Math.random()*primeList.length);    var randPrimeSum = primeList[randPrimeSumVal];*/    //var randSum = Math.floor(Math.random()*6 + 7);    var randAmount = Math.floor(Math.random()*(maxAmount - 3) + 3);    var durList = new NormalSequence(        1.5, 1, max, false, 1, true    ).wholeSeq("byAmount", randAmount);    return durList;}MultiDepthRhythm.prototype.recurseTree = function(durList, depth) {        var tempDurList = durList;    var max = tempDurList.max();    var min = tempDurList.min();    for (var dur = 0; dur < durList.length; dur ++) {        var curDur = tempDurList[dur];        t.w(curDur + ": min: " + min + "; max: " + max);        if (curDur > min && curDur < max) {            var newDurList = this.newDurList(4, 4);            durList[dur] = [curDur, newDurList];        };    };    this.durList = durList;};var byWhatList = ["byAmount", "bySum"];var staff = new Staff(35, 400, 5, "treble", 0);x = 50;for (var i = 0; i < 5; i ++) {    var mdr = new MultiDepthRhythm(1);    var beats = mdr.beats;    var subdivision = mdr.subdivision;    x += beats/subdivision * 8 * curScore.beat_width;};