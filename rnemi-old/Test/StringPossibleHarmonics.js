#target "illustrator"#include "../testDoc.js"#include "../conversions.js"#include "../colors.js"#include "../Staff.js"function StringHarmonicsTest(openStringsList) {	this.openStringsList = openStringsList;	this.beam_displace = 25;	this.buildPitchList();	this.declareBeams();	this.drawPitches();};StringHarmonicsTest.prototype.drawPitches = function() {	for (var p = 0; p < this.pitchList.length; p ++) {		var x = 75 + p * 25;        var curPitch = Math.round(this.pitchList[p].midi * 4) / 4;		var curString = this.pitchList[p].string;		var curPartial = this.pitchList[p].partial;		var beamAltitude = this.beamAltitudeByString[curString];		var stem = testDoc.pathItems.add();		var pitchINFO = {};		pitchINFO[curPitch] = {}        pitchINFO[curPitch].type = "ord";        pitchINFO[curPitch].color = stringColor[curString].darkColor;        this.beamPoint(x, curString);		staff.pitch(x, pitchINFO);                stem.setEntirePath([			[x, beamAltitude],			[x, curGraph.minNoteheadY]		]);        stem.strokeWidth = .5;        stem.strokeColor = stringColor[curString].darkColor;        stem.filled = false;        this.label(x, this.labelAltitudeByString[curString], curString, curPartial);	};}StringHarmonicsTest.prototype.buildPitchList = function() {	this.pitchList = [];	for (var string = 0; string < 4; string ++) {		var stringFundamentalMidi = this.openStringsList[string];		var stringFundamentalFreq = midiToFreq(stringFundamentalMidi);		for (var partial = 2; partial < 10; partial ++) {			// Create pitch object with string info, and exact pitch info, as well as positions			var pitch = {};			pitch.string = string;			pitch.freq = stringFundamentalFreq * partial;			pitch.midi = freqToMidi(pitch.freq);			pitch.partial = partial;			pitch.positions = [];			for (var instance = 1; instance < partial; instance ++) {				pitch.positions.push(instance / partial);			};			this.pitchList.push(pitch);		};	};	this.pitchList.sort( function(a,b) { return a.freq - b.freq } );};StringHarmonicsTest.prototype.beamPoint = function(x, string) {	var y = this.beamAltitudeByString[string];	var beamPoint = this.beams[string].pathPoints.add();	beamPoint.anchor = [x,y];	beamPoint.leftDirection = beamPoint.anchor;	beamPoint.rightDirection = beamPoint.anchor;};StringHarmonicsTest.prototype.label = function(x, y, string, partial) {	var stringNumberToRoman = ["IV", "III", "II", "I"];	this.labelBox(x, y, string);	var font = app.textFonts.getByName("Baskerville-SemiBold");	var text = testDoc.textFrames.add();	text.contents = stringNumberToRoman[string] + "." + partial;	text.top = y + 10;	text.left = x;	text.textRange.paragraphAttributes.justification = Justification.CENTER;	text.textRange.characterAttributes.size = 8;	text.textRange.characterAttributes.fillColor = stringColor[string].darkColor;	text.textRange.characterAttributes.textFont = font;}StringHarmonicsTest.prototype.labelBox = function(x, y, string) {	var height = 7.5;	var width = 16.5;	var color = stringColor[string].darkColor;		var labelBox = testDoc.pathItems.rectangle(		y + 0.85 * height,		x - 0.5 * width,		width,		height	);	labelBox.strokeWidth = 0.1;	labelBox.strokeColor = color;	labelBox.fillColor = white;}StringHarmonicsTest.prototype.declareBeams = function() {    this.beamAltitudeByString = [		curGraph.bottom - 50,		curGraph.bottom - 25,		curGraph.top + 50,		curGraph.top + 75	];	this.labelAltitudeByString = [		curGraph.bottom - 45,		curGraph.bottom - 20,		curGraph.top + 40,		curGraph.top + 65	];    	this.beams = [];	for (var b = 0; b < 4; b ++) {		this.beams[b] = testDoc.pathItems.add();		this.beams[b].strokeWidth = 2;		this.beams[b].strokeColor = stringColor[b].darkColor;	};};var openStrings = [46, 55, 61, 69];var staff = new Staff(50, 9.5 * 72, 0.75 * 5, "treble", 0);var stringHarmonicsTest = new StringHarmonicsTest(openStrings);//var staff = new Staff(50, 6 * 72, 5, "treble", 0);//var adjacentHarmonics = new AdjacentHarmonics(openStrings);