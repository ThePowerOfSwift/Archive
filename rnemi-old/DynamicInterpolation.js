function DynamicInterpolation(type) {        this.type = type || "linear"; // types come in as "linear", "static", "swell"    this.dynamicMarkings = [];}DynamicInterpolation.prototype.graphicalDimensions = function() {    this.g = this.dynamicMarkings[0].g;    this.y = this.dynamicMarkings[0].y;    this.strokeWidth = 0.1 * this.g;    this.openHeight = 1.5 * this.g;    this.clippedHeight = 0.618 * this.openHeight;    this.color = gray[50];    this.systemBreakCount = 0;    this.paths = [];}DynamicInterpolation.prototype.begin = function(DynamicMarking) {    this.dynamicMarkings[0] = DynamicMarking;    this.left = this.dynamicMarkings[0].right;}DynamicInterpolation.prototype.end = function(DynamicMarking) {    this.dynamicMarkings[1] = DynamicMarking;    this.right = this.dynamicMarkings[1].left;    this.getDirection();}DynamicInterpolation.prototype.draw = function(graphicalContext) {    this.graphicalDimensions();    this.graphicalContext = graphicalContext.groupItems.add();    if (this.type === "linear") {        // Basic, uninterrupted interpolation        if (this.dynamicMarkings[0].systemID ===             this.dynamicMarkings[1].systemID        ) {            this.simpleLinear();        }        // Interrupted        else {            // call interrupt and continue        };    }    else if (this.type === "swell") {        // Basic, uninterrupted interpolation        if (this.dynamicMarkings[0].systemID ===             this.dynamicMarkings[1].systemID        ) {            this.simpleSwell();        }        // Interrupted        else {            // call interrupt and continue        };    }    else if (this.type === "static") {         // Basic, uninterrupted interpolation        if (this.dynamicMarkings[0].systemID ===             this.dynamicMarkings[1].systemID        ) {            this.simpleStatic();        }        // Interrupted        else {            // call interrupt and continue        };    };}DynamicInterpolation.prototype.simpleLinear = function() {    var a = this.dynamicMarkings[0];    var b = this.dynamicMarkings[1];    var xRefByDirection = {        "-1": [a.right, b.left, a.right],         "1": [b.left, a.right, b.left]    };    var y0 = this.y + 0.5 * this.openHeight;    var y1 = this.y;    var y2 = this.y - 0.5 * this.openHeight;    var x0 = xRefByDirection[this.direction][0];    var x1 = xRefByDirection[this.direction][1];    var x2 = xRefByDirection[this.direction][2];    // Add just a little padding for p cresc.    if (a.charList.last() === "p") {        if (this.direction === -1) {            x0 += 0.45 * this.g;            x2 += 0.45 * this.g;        }        else if (this.direction = 1) {            x1 += 0.236 * this.g;        };    };    var points = [[x0, y0],[x1, y1],[x2, y2]];    if (a.type === "implicit" && this.direction === -1) {        var x = a.right;        var y = this.y - 0.5 * this.strokeWidth;        var point = [x, y];        points.splice(0, 0, point);    };    var hairpin = this.graphicalContext.pathItems.add();    hairpin.setEntirePath(points);    hairpin.strokeWidth = this.strokeWidth;    hairpin.strokeColor = this.color;    hairpin.fillColor = white;}DynamicInterpolation.prototype.simpleStatic = function() {    var a = this.dynamicMarkings[0];    var b = this.dynamicMarkings[1];    var pad = 0.382 * this.g;    var x0 = a.right;    var x1 = b.left;    var y = this.y;    if (a.type === "ord") { x0 += pad; }    else if (b.type === "ord") { x1 -= pad; };    var line = this.graphicalContext.pathItems.add();    line.setEntirePath([[x0, y],[x1, y]]);    line.strokeWidth = this.strokeWidth;    line.strokeColor = this.color;    line.filled = false;        if (b.type === "ord") {        var y0 = this.y + 0.5 * this.openHeight;        var y1 = this.y - 0.5 * this.openHeight;        var hash = this.graphicalContext.pathItems.add();        hash.setEntirePath([[x1, y0],[x1, y1]]);        hash.strokeWidth = this.strokeWidth;        hash.strokeColor = this.color;        hash.filled = false;    };};DynamicInterpolation.prototype.simpleSwell = function() {        var a = this.dynamicMarkings[0];    var b = this.dynamicMarkings[1];    var pad = 0.382 * this.g;    var center = (a.right + b.left) / 2;    var x0 = a.right;    var x1 = center - pad;    var x2 = center + pad;    var x3 = b.left;    var y0 = this.y + 0.5 * this.openHeight;    var y1 = this.y;    var y2 = this.y - 0.5 * this.openHeight;    var pointRef = [        [[x1, y0], [x0, y1], [x1, y2]],        [[x2, y0], [x3, y1], [x2, y2]]    ];    for (var h = 0; h < 2; h ++) {        var points = [];        for (var p = 0; p < pointRef[h].length; p ++) {            points.push(pointRef[h][p]);        };        var hairpin = this.graphicalContext.pathItems.add();        hairpin.setEntirePath(points);        hairpin.strokeWidth = this.strokeWidth;        hairpin.strokeColor = this.color;        hairpin.filled = false;    };}DynamicInterpolation.prototype.interrupt = function() {    // add points to prev path, call continue?}DynamicInterpolation.prototype.continue = function() {    // create new path}DynamicInterpolation.prototype.open = function() {}DynamicInterpolation.prototype.clippedOpen = function() {}DynamicInterpolation.prototype.close = function() {}DynamicInterpolation.prototype.getDirection = function() {        this.dynamicBegin = parseInt(this.dynamicMarkings[0].dynamicList.last());    this.dynamicEnd = parseInt(this.dynamicMarkings[1].dynamicList[0]);    this.direction = (this.dynamicBegin > this.dynamicEnd) ? -1 : 1;    $.writeln("direction: " + this.direction);}