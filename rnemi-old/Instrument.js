#include "GraphByType.js"function Instrument(Performer) {        this.Performer = Performer;    this.System = this.Performer.System;    this.measureList = this.Performer.measureList;    this.measureRange = this.Performer.measureRange;    this.performerID = this.Performer.performerID;    this.instrumentID = this.performerID;    this.primaryPerformerID = this.Performer.primaryPerformerID;    this.beamGroups = this.Performer.beamGroups;    this.g = this.Performer.g;    this.graphPad = 0.1618 * 72;    this.manageGraphsForLayout();    this.setPrimaryGraphIDByInstrumentID();    this.setGraphOrder();};Instrument.prototype.testGraphs = function() {    this.graphicalContext = this.System.graphItemContext;    var gCount = 0;    for (var g in this.graphsByID) {        var graph = this.graphsByID[g];        graph.left = this.System.left;        graph.top = this.System.top - gCount * 50;        graph.draw(this.graphicalContext);        gCount ++;    };}Instrument.prototype.manageGraphsForLayout = function() {        this.graphsByID = {};    this.amountGraphs = 0;    for (var b = 0; b < this.beamGroups.length; b ++) {        var beamGroup = this.beamGroups[b];        var flattened = beamGroup.flattened;        for (var e = 0; e < flattened.length; e ++) {            var event = flattened[e];            var components = event.components;            for (var c = 0; c < components.length; c ++) {                var component = components[c];                var graphID = component.graphID;                if (component.performerID === this.performerID) {                    // If this is the primary performer of view: all graphs                    if (this.primaryPerformerID === "omni") {                        if (!(graphID in this.graphsByID) &&                            graphID === "sounding"                        ) {                            this.addGraph(graphID);                        };                    }                    else if (this.performerID === this.primaryPerformerID) {                        if (!(graphID in this.graphsByID)) {                            this.addGraph(graphID);                        };                    }                    // If this performer is supplementary, add only "sounding"                    else {                        if (!(graphID in this.graphsByID) &&                            graphID === "sounding"                        ) {                            t.w("add supplementary cue graph");                            this.addGraph("cue");                        };                    };                };            };        };    };};Instrument.prototype.setGraphOrder = function() {        // order of drawing from top-down    var graphOrderByInstrumentID = {        "FL": ["sounding", "cue"],        "CL": ["sounding", "fingered", "cue"],        "VA": ["sounding", "fingered", "cue"],        "VN": ["sounding", "fingered", "cue"],        "VC": ["sounding", "fingered", "cue"]    };    this.graphOrder = graphOrderByInstrumentID[this.instrumentID];};Instrument.prototype.setPrimaryGraphIDByInstrumentID = function() {    var primaryGraphIDByInstrumentID = {        "FL": "sounding",        "CL": "fingered",        "VA": "fingered",        "VN": "fingered",        "VC": "fingered"    };    this.primaryGraphID = primaryGraphIDByInstrumentID[this.instrumentID];};Instrument.prototype.addGraph = function(graphID) {    var graphType = this.getGraphTypeByID(graphID);    var graph = new GraphByType(this, graphType, graphID).graph;    this.graphsByID[graphID] = graph;    this.amountGraphs += 1;};Instrument.prototype.getGraphTypeByID = function(graphID) {    var graphTypeByID = {        "sounding": "staff",        "fingered": "staff",        "tablature": "stringTablature",        "cue": "cue"    };    return graphTypeByID[graphID];};Instrument.prototype.repositionGraphs = function() {    this.graphsTop;    this.graphsBottom;    this.height = 0;    var graphTop = this.top;    for (var g = 0; g < this.graphOrder.length; g ++) {        t.w("graphTop: " + graphTop);        if (this.graphOrder[g] in this.graphsByID) {            t.w("Instrument.repositionGraphs: graphOrder[g]: " + this.graphOrder[g]);            var graph = this.graphsByID[this.graphOrder[g]];            t.w("graphDisplaceFromTop: " + graph.graphDisplaceFromTop);            t.w("graph.name: " + graph.name);            graph.top = graphTop - graph.graphDisplaceFromTop;            graph.left = this.left;            var bottom = graph.top - graph.height;            if (!this.graphsTop || graph.top > this.graphsTop)                 { this.graphsTop = graph.top; };            if (!this.graphsBottom || bottom < this.graphsBottom)                { this.graphsBottom = bottom };            graphTop -= graph.totalHeight + this.graphPad;            this.height += graph.totalHeight        };    };};Instrument.prototype.getHeightForLayout = function() {    var graphCount = 0;    this.height = 0;    for (var graphID in this.graphsByID) {        var height = this.graphsByID[graphID].getHeightForLayout();        var pad = graphCount > 0 ? this.graphPad : 0;        this.height += height + pad;        graphCount ++;    };    return this.height;    /*    this.height = 0;    for (var g = 0; g < this.graphs.length; g ++) {        var graph = this.graphs[g];        var height = graph.getHeightForLayout();        var pad = g > 0 ? this.graphPad : 0;        this.height += height + pad;    };    return this.height;*/}Instrument.prototype.getDimensions = function() {    for (var g = 0; g < this.graphs.length; g ++) {        var graph = this.graphs[g];        if (! this.graphsTop || graph.top > this.graphsTop)             { this.graphsTop = graph.top };        if (! this.graphsBottom || graph.bottom < this.graphsBottom)            { this.graphsBottom = graph.bottom };    };    // return object with yMax, yMin, graphsTop, graphsBottom}Instrument.prototype.getGraphDimensions = function() {    };Instrument.prototype.draw = function(graphicalContext) {    this.testRect();}Instrument.prototype.testRect = function() {    // for testing only!    this.graphicalContext = this.Performer.System.graphicalContext;    //this.height = this.graphsTop - this.graphsBottom;    this.width = this.Performer.System.width;    /*var rect = this.graphicalContext.pathItems.rectangle(        this.top, this.left, this.width, this.height    );    rect.strokeWidth = 0.618;    rect.strokeColor = green_dark;    rect.filled = false;       */};