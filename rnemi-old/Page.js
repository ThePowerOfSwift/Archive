//#include "Layout.js"#include "System.js"#include "Staff.js"function Page(View, left, top, measureStart) {    t.w("PAGE");    // Establish the things    this.View = View;    this.primaryPerformerID = this.View.primaryPerformerID;    this.performerOrder = this.View.performerOrder;    this.left = left || 0;    this.top = top || 0;    this.measureStart = measureStart || 0;    this.measureList = this.View.measureList;    this.beatWidth = this.View.beatWidth;    this.width = this.View.pageWidth;    this.height = this.View.pageHeight;    this.bottom = this.top - this.height;    this.right = this.left + this.width;    this.g = this.View.g;    this.margin = 0.5 * 72;    this.systemPad = 0.33 * 72;    //this.firstSystemMargin = 6 * 72;    this.maxSystemRight = this.left + this.width - 2 * this.margin;    this.allowedSystemHeight = this.height - (2.5 * this.margin);    // Do the things    }Page.prototype.page = function() {    this.graphicalContext.artboards.add([        this.left,        this.top,        this.left + this.width,        this.top - this.height    ]);    this.pageNumber();}Page.prototype.manageSystemsForLayout = function() {    this.systems = [];    this.cumulativeSystemHeight = 0;    while (this.cumulativeSystemHeight < this.allowedSystemHeight &&           this.measureStart < this.measureList.length    ) {        var measureStart = this.measureStart;        var system = new System(this, measureStart);        var height = system.getHeightForLayout();        if (this.cumulativeSystemHeight + height <= this.allowedSystemHeight) {            this.systems.push(system);            this.measureStart = system.measureEnd + 1;        };        var pad = this.cumulativeSystemHeight > 0 ? this.systemPad : 0;        this.cumulativeSystemHeight += height + pad;    };    this.measureEnd = this.systems.last().measureEnd;};Page.prototype.repositionSystems = function() {    var systemTop = this.top - this.margin;    var systemLeft = this.left + this.margin;    for (var s = 0; s < this.systems.length; s ++) {        var system = this.systems[s];        system.id = s;        system.setGraphicalContext(this.graphicalContext);        system.top = systemTop;        system.left = systemLeft;        system.repositionAllForDrawing();        system.testBeamGroups();        system.drawMeasures(this.graphicalContext);        //system.testRect();        //system.testBeamGroups();        if (s < this.systems.length -1) {            system.breakHash(system.left + 0.3125 * 72); // make variable !!            //system.breakHash(system.left + system.width + 0.3125 * 72);        };                systemTop -= system.height + this.systemPad;    };};Page.prototype.normalizeSystems = function() {        var amountSystems = this.systems.length;    this.totalSystemHeight = 0;    for (var s = 0; s < amountSystems; s ++) {        var system = this.systems[s];        this.totalSystemHeight += system.height;    };    this.totalSystemHeight += this.systemPad * (amountSystems - 1);};Page.prototype.addSystem = function(left, systemTop) {    var measureStart = this.measureStart;    var system = new System(        this, left, systemTop, measureStart    );    if (systemTop - system.height >= this.bottom + this.margin) {        system.id = this.systemCount;        this.systems.push(system);    };};Page.prototype.testRect = function() {    var rect = this.graphicalContext.pathItems.rectangle(        this.top - this.margin,        this.left + this.margin,        this.width - 2 * this.margin,        this.height - 2 * this.margin    );    rect.strokeWidth = 4;    rect.strokeColor = gray[33];    rect.filled = false;    rect.locked = true;};Page.prototype.pageNumber = function() {    var font = app.textFonts.getByName("Baskerville-SemiBold");    var number = this.graphicalContext.textFrames.add();    number.contents = this.id + 1;    number.textRange.characterAttributes.textFont = font;    number.textRange.characterAttributes.size = 16;    number.textRange.characterAttributes.fillColor = black;    number.top = this.bottom + this.margin;    if (this.id % 2 === 0) {        number.left = this.right - this.margin;        number.textRange.paragraphAttributes.justification = Justification.RIGHT;    }    else {        number.left = this.left + this.margin;        number.textRange.paragraphAttributes.justification = Justification.LEFT;    };};