//
//  GraphWaveform.swift
//  DNM_iOS
//
//  Created by James Bean on 10/1/15.
//  Copyright Â© 2015 James Bean. All rights reserved.
//

import QuartzCore
import DNMModel

public class GraphWaveform: GraphLayer {
    
    //public var waveform = CAShapeLayer()
    public var width: CGFloat = 0
    
    public var waveforms: [Waveform] = []
    
    public init(id: String, height: CGFloat, width: CGFloat) {
        super.init(identifier: id)
        self.height = height
        self.width = width
        //build()
    }
    
    public override init() { super.init() }
    public override init(layer: AnyObject) { super.init(layer: layer) }
    public required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) }
    
    public func addWaveform(waveform: Waveform) {
        // waveform needs already width, height, duration
        waveform.height = height
        waveform.build()
        waveforms.append(waveform)
        addSublayer(waveform)
    }
    
    public func addWaveform(waveform: Waveform, atX x: CGFloat) {
        // waveform needs already to have width, and duration
        waveform.height = height
        waveform.left = x
        waveform.build()
        waveforms.append(waveform)
        addSublayer(waveform)
    }
    
    public func addSampleWaveformAtX(
        x: CGFloat, withDuration duration: Duration, andBeatWidth beatWidth: CGFloat
    )
    {
        let waveform = WaveformSampleWithDuration(duration, andBeatWidth: beatWidth)
        waveform.height = height
        waveform.left = x
        waveform.build()
        waveforms.append(waveform)
        addSublayer(waveform)
    }
    
    public func addWaveform(waveform: Waveform, atX x: CGFloat, withDuration duration: Duration) {
        // just needs to have data
    }
    
    public override func build() {
        
        // setFrame()
        frame = CGRectMake(0, 0, width, height)
        stopLinesAtX(frame.width)
        
        commitLines()
        
        /*
        let samples: [Float] = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.010462, 0.0083282, 0.00147152, 0.0169483, 0.0124644, 0.0107427, 0.0219026, 0.0146749, 0.044479, 0.0415802, 0.0354871, 0.0185142, 0.11516, 0.0642569, 0.156937, 0.0434963, 0.145034, 0.0167814, 0.0902721, 0.0950248, 0.109934, 0.0397922, 0.132396, 0.0356538, 0.0148442, 0.00491643, 0.00566721, 0.00508523, 0.0830859, 0.0585051, 0.11535, 0.0352875, 0.0296091, 0.0713762, 0.0362551, 0.0578302, 0.00693142, 0.00258565, 0.039005, 0.0107278, 0.00432396, 0.0407237, 0.0222836, 0.0143319, 0.0327955, 0.00848401, 0.139131, 0.156523, 0.0716143, 0.566146, 0.00885189, 0.36688, 0.0408239, 0.0738508, 0.241877, 0.278969, 0.244231, 0.112645, 0.122212, 0.078971, 0.0145921, 0.0397545, 0.47195, 0.0170387, 0.0603313, 0.0386713, 0.0727738, 0.0191475, 0.0356319, 0.00633252, 0.012879, 0.014058, 0.00183976, 0.00929642, 0.000601768, 0.00647926, 0.00329614, 0.00441158, 0.00559282, 0.00163031, 0.00609887, 0.0152296, 0.0713328, 0.114067, 0.0407958, 0.00414598, 0.0312197, 0.0224737, 0.133248, 0.0900182, 0.103549, 0.026067, 0.0112169, 0.0125473, 0.0268196, 0.00338972, 0.0219913, 0.00330496, 0.0045135, 0.0284321, 0.00336468, 0.0171177, 0.0183434, 0.00955617, 0.00494659, 0.00803518, 0.0112993, 0.00389588, 0.00391126, 0.00994551, 0.00795555, 0.00539434, 0.00824606, 0.00364399, 0.00436044, 0.0035001, 0.00238585, 0.00134695, 0.00706613, 0.0043031, 0.0023706, 0.000835896, 0.00447345, 0.000825047, 0.00544488, 0.00618613, 0.00366199, 0.0290092, 0.00678587, 0.00429606, 0.0315063, 0.0119532, 0.0353492, 0.0485239, 0.0359246, 0.0858662, 0.0832477, 0.0172266, 0.00160301, 0.0167632, 0.0184845, 0.00934899, 0.0151564, 0.022184, 0.00390768, 0.00365281, 0.00164616, 0.0158896, 0.0193877, 0.00678682, 0.00686836, 0.00127304, 0.00854671, 0.0108639, 0.00100374, 0.00353968, 0.00249732, 0.00411463, 0.000408292, 0.0143905, 0.000983238, 0.00137115, 0.00774729, 0.0327877, 0.0123739, 0.0136656, 0.0076983, 0.00763094, 0.0145818, 0.00669706, 0.0803639, 0.00540149, 0.00141203, 0.0149515, 0.00487053, 0.0265337, 0.0125066, 0.00309741, 0.00227225, 0.00206304, 0.00412858, 0.000868201, 0.00639677, 0.00312209, 0.000167251, 0.00489819, 0.0058639, 0.00175607, 0.00101197, 0.00245762, 0.00278771, 0.00149918, 0.00350606, 0.00593126, 0.00568521, 0.00429261, 0.0241278, 0.00923705, 0.0275117, 0.015396, 0.00673616, 0.0209541, 0.00576878, 0.00820577, 0.00368667, 0.00108504, 0.00443137, 0.00464714, 0.00202334, 0.000532746, 0.00120437, 0.000506043, 0.00283527, 0.00143886, 0.00041914, 0.00158179, 0.00350535, 0.00129664, 0.00281906, 0.00482702, 0.00264275, 0.000658512, 0.000162482, 0.00128353, 0.00132251, 0.00301921, 0.0038867, 0.00109792, 0.00471437, 0.0015974, 0.00710106, 0.00444281, 0.00181842, 0.0020535, 0.00265157, 0.000760794, 0.0136061, 0.000347137, 0.0122522, 0.00474298, 0.0143242, 0.00243711, 1.3113e-06, 0.00270331, 0.00330257, 0.00154507, 0.00602424, 0.00714064, 9.15527e-05, 0.00333595, 0.00184977, 0.00229228, 0.00271976, 0.00138664, 0.0030905, 0.0111682, 0.0110378, 0.000361681, 0.0216013, 0.0195831, 0.0375885, 0.0207087, 0.0414463, 0.0272851, 0.00740123, 0.0359639, 0.0257306, 0.0578567, 0.00414968, 0.0133113, 0.0236044, 0.0371754, 0.00154972, 0.00484872, 0.00601363, 0.0205531, 0.00631964, 0.006814, 0.00228775, 0.00776851, 0.0018425, 0.00114036, 0.00481606, 0.00072825, 0.0479351, 0.00567031, 0.0826197, 0.0297441, 0.0363141, 0.0157474, 0.0606596, 0.00358486, 0.0799441, 0.00194776, 0.0230713, 0.00695384, 0.0292134, 0.0208521, 0.00588918, 0.013467, 0.0113403, 0.00743246, 0.00421965, 0.0307044, 0.0181178, 0.00941527, 0.00935912, 0.0119767, 0.017994, 0.00596905, 0.0108644, 0.0111158, 0.0108134, 0.00728321, 0.00339174, 0.00866413, 0.0103217, 0.00654435, 0.00405014, 0.000581264, 0.00277722, 0.00100648, 0.00115263, 3.5882e-05, 0.00601602, 0.00148666, 0.00570357, 0.00160122, 0.00593913, 0.0877285, 0.0358624, 0.0240715, 0.113715, 0.0578035, 0.0273252, 0.017208, 0.0321136, 0.0086391, 0.0113444, 0.00283194, 0.00467706, 0.0107399, 0.000139832, 0.0354226, 0.0279669, 0.000491977, 0.0445242, 0.0029856, 0.00877535, 0.0158761, 7.05719e-05, 0.00313199, 0.000965834, 0.011393, 0.0031507, 0.00262034, 0.00250912, 0.00374758, 0.00865889, 0.00401711, 0.00018084, 0.00100744, 0.00540078, 0.00522804, 0.000713468, 0.00413311, 0.00583267, 0.00316095, 0.00357091, 0.00933921, 0.0138352, 0.123892, 0.0710301, 0.0220797, 0.00173199, 0.018108, 0.000563741, 0.0155127, 0.00443196, 0.00434291, 0.00191617, 0.00109553, 0.0074321, 0.00252664, 0.00621915, 0.00391459, 0.00275862, 0.00367987, 0.00289226, 0.00390446, 0.00130713, 0.00105715, 0.00054431, 0.00109887, 5.4121e-05, 0.00112212, 0.00253451, 0.00147831, 0.00223064, 0.00150561, 0.00279534, 0.00131297, 0.00266147, 0.000764608, 0.00278795, 0.000151634, 0.00331068, 0.00244319, 0.0043664, 0.00239301, 0.0021317, 0.0086664, 0.00515997, 0.000201941, 0.00276995, 0.00176084, 0.00103056, 0.000700831, 0.000859022, 0.000979304, 0.00151956, 0.00294662, 0.00099647, 0.00309896, 0.00362647, 0.000539899, 0.00121927, 0.000721216, 0.0024761, 0.00168836, 0.000438809, 0.00685477, 0.0186656, 0.0793777, 0.128672, 0.0798665, 0.0232066, 0.0319523, 0.00732875, 0.0602022, 0.614993, 0.156867, 0.0658588, 0.0453141, 0.189273, 0.0194618, 0.0781457, 0.0305985, 0.118841, 0.0321888, 0.0710452, 0.0817484, 0.111048, 0.0426221, 0.0431559, 0.00240612, 0.00648522, 0.0171953, 0.040638, 0.00488198, 0.0143812, 0.0489045, 0.0113395, 0.00926208, 0.00605929, 0.000901222, 0.000342965, 0.00445652, 0.000185966, 0.00445497, 0.00989282, 0.00849783, 0.0209134, 0.00294507, 0.0164789, 0.00162697, 0.0100218, 0.00268364, 0.00259352, 0.00942791, 0.0291201, 0.0149795, 0.00933838, 0.0252215, 2.40803e-05, 0.001086, 0.0049032, 0.00075841, 0.0227757, 0.0394336, 0.00316548, 0.0199518, 0.00660896, 0.0204728, 0.0150915, 0.0114305, 0.00649762, 0.00799596, 0.0148304, 0.0023694, 0.000910044, 0.0132469, 0.00407624, 0.0161746, 0.00612342, 0.00363314, 0.000247836, 0.000152469, 0.00942552, 0.00861585, 0.00726092, 0.00310993, 0.00446582, 0.00710738, 0.00839329, 0.00625098, 0.00767791, 0.00779271
        ]
        
        print("samples.count: \(samples.count)")
        
        var lessSamples: [Float] = []
        var s: Int = 0
        while s < samples.count {
            lessSamples.append(samples[s])
            s += (Int(Float(samples.count) / Float(width))) * 2
        }
        
        let max = lessSamples.sort({$0 > $1}).first!
        lessSamples = lessSamples.map { $0 * (1 / max) }
        
        print("less samples: \(lessSamples)")
        print("less samples.min: \(lessSamples.sort({$0 < $1}).first!)")
        print("less samples.max: \(lessSamples.sort({$0 > $1}).first!)")
        print("less samples.count: \(lessSamples.count)")
        
        var y: CGFloat = frame.height
        
        
        let zeroLine = CAShapeLayer()
        let zeroLine_path = UIBezierPath()
        zeroLine_path.moveToPoint(CGPointMake(0, y))
        zeroLine_path.addLineToPoint(CGPointMake(frame.width, y))
        zeroLine.path = zeroLine_path.CGPath
        zeroLine.strokeColor = UIColor.lightGrayColor().CGColor
        zeroLine.lineWidth = 1
        //addSublayer(zeroLine)
        
        
        //let waveform = CAShapeLayer()
        let path = UIBezierPath()
        var x: CGFloat = 0
        for (s, sample) in lessSamples.enumerate() {
            let line_y = y - frame.height * CGFloat(sample)
            
            print("sample: \(sample); x: \(x); line_y: \(line_y)")
            
            if s == 0 {
                path.moveToPoint(CGPointMake(x, line_y))
            }
            else {
                path.addLineToPoint(CGPointMake(x, line_y))
            }
            x += 1
        }
        
        waveform.path = path.CGPath
        
        //let boundingBox = CGPathGetBoundingBox(line.path)
        //print("boundingBox: \(boundingBox)")
        //let h_scale = boundingBox.width / frame.width
        //print("h_scale: \(h_scale)")
        //var xf = CGAffineTransformIdentity
        //CGAffineTransformScale(xf, h_scale, 1)
        
        //line.path = CGPathCreateCopyByTransformingPath(line.path, &xf)
        
        waveform.lineWidth = 1
        waveform.strokeColor = UIColor.grayColor().CGColor
        //line.fillColor = UIColor.redColor().CGColor
        //line.opacity = 0.5
        addSublayer(waveform)
        */
    }
}